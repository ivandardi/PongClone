#ifndef ENTITY_H
#define ENTITY_H

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <SFML/Graphics.hpp>

////////////////////////////////////////////////////////////
/// \brief Entity base class
///
////////////////////////////////////////////////////////////
class Entity : public sf::Drawable, public sf::Transformable {

public:

    ////////////////////////////////////////////////////////////
    /// \brief Explicit entity constructor
    ///
    ////////////////////////////////////////////////////////////
    explicit Entity(float width, float height);

    ////////////////////////////////////////////////////////////
    /// \brief Virtual destructor for inheritance
    ///
    ////////////////////////////////////////////////////////////
    virtual ~Entity() = default;

    ////////////////////////////////////////////////////////////
    /// \brief Returns the top bound of the entity
    ///
    /// \return Returns the top bound of the entity
    ///
    ////////////////////////////////////////////////////////////
    float top() const { return _rect.getGlobalBounds().top; }

    ////////////////////////////////////////////////////////////
    /// \brief Returns the left bound of the entity
    ///
    /// \return Returns the left bound of the entity
    ///
    ////////////////////////////////////////////////////////////
    float left() const { return _rect.getGlobalBounds().left; }

    ////////////////////////////////////////////////////////////
    /// \brief Returns the bottom bound of the entity
    ///
    /// \return Returns the bottom bound of the entity
    ///
    ////////////////////////////////////////////////////////////
    float bottom() const { return _rect.getGlobalBounds().top + _rect.getGlobalBounds().height; }

    ////////////////////////////////////////////////////////////
    /// \brief Returns the roght border of the entity
    ///
    /// \return Returns the roght border of the entity
    ///
    ////////////////////////////////////////////////////////////
    float right() const { return _rect.getGlobalBounds().left + _rect.getGlobalBounds().width; }

    ////////////////////////////////////////////////////////////
    /// \brief Returns the center of the entity
    ///
    /// \return Returns the center of the entity
    ///
    ////////////////////////////////////////////////////////////
    sf::Vector2f center() const { return {(right() + left())/2.f, (bottom() + top())/2.f}; }

    ////////////////////////////////////////////////////////////
    /// \brief Returns the width of the entity
    ///
    /// \return Returns the width of the entity
    ///
    ////////////////////////////////////////////////////////////
    float width() const { return _rect.getGlobalBounds().width; }

    ////////////////////////////////////////////////////////////
    /// \brief Returns the height of the entity
    ///
    /// \return Returns the height of the entity
    ///
    ////////////////////////////////////////////////////////////
    float height() const { return _rect.getGlobalBounds().height; }

    ////////////////////////////////////////////////////////////
    /// \brief Returns the bounding box of the entity
    ///
    /// \return Returns the bounding box of the entity
    ///
    ////////////////////////////////////////////////////////////
    sf::FloatRect getBoundingBox() const { return _rect.getGlobalBounds(); }

protected:

    ////////////////////////////////////////////////////////////
    // Member data
    ////////////////////////////////////////////////////////////
    sf::RectangleShape _rect;  ///< Rectangle shape that is the actual entity
    sf::Clock          _clock; ///< Clock for smooth movement
};

#endif // ENTITY_H
